

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
// import Button from 'bee-button';
// import { Con, Row, Col } from 'bee-layout';
// import { Panel } from 'bee-panel';
import {Button,Panel,Con, Row, Col} from 'tinper-bee';
import './demo.scss';
const pkg = require('../package.json')




const CARET = <i className="uf uf-arrow-down"></i>;

const CARETUP = <i className="uf uf-arrow-up"></i>;


import Demo1 from "./demolist/Demo1";import Demo2 from "./demolist/Demo2";import Demo3 from "./demolist/Demo3";
var DemoArray = [{"example":<Demo1 />,"title":" 表格参照","code":"/**\n *\n * @title 表格参照\n * @description 表格参照\n *\n */\nimport React, { Component } from 'react';\nimport RefMultipleTableBaseUI,{ SearchPanelItem } from '../../src/index';\n// import { SearchPanelItem } from '../../src/components/RefSearchPanel';\n// import FormControl from 'bee-form-control';\n// import 'bee-form-control/build/FormControl.css';\n// import Button from 'bee-button';\n// import Form from \"bee-form\";\nimport {FormControl,Button,Form} from 'tinper-bee';\nimport { refValParse } from './utils';\nimport request from './request';\nconst props = {\n  param:{\n      \"refCode\": \"new_bd_staff\"\n  },\n  refModelUrl:{\n      tableBodyUrl: '/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n      refInfo: '/pap_basedoc/common-ref/refInfo',//表头请求\n  },\n  matchUrl:'/pap_basedoc/common-ref/matchPKRefJSON',\n  filterUrl:'/pap_basedoc/common-ref/filterRefJSON',\n  valueField: \"refpk\",\n  displayField: \"{refname}\",\n\n}\nclass Demo1 extends Component {\n  columnsData = []//表头数据\n  tableData = []//表格数据\n  pageCount = 1//总页数\n  pageSize = '10'//每页数据数\n  currPageIndex = 1//激活页码\n  fliterFormInputs = []\n  filterInfo = {};\n  constructor(props) {\n    super(props);\n    this.state = {\n      showLoading: true,\n      selectedDataLength: 0,\n      mustRender: 0,\n      showModal:false\n    };\n    this.checkedArray = [];\n    this.checkedMap = {};\n    this.inited = false;\n  }\n\n  componentDidMount() {\n    this.initComponent();\n  }\n  initComponent = () => {\n    let { jsonp, headers, param, value, matchUrl, onMatchInitValue, valueField = \"refpk\" } = props;\n    let requestList = [\n      this.getTableHeader(),\n      this.getTableData({\n        'refClientPageInfo.currPageIndex': 0,\n        'refClientPageInfo.pageSize': 10\n      }),\n    ];\n    let valueMap = refValParse(value);\n    if (this.checkedArray.length == 0 && valueMap.refpk) {\n      requestList.push(request(matchUrl, {\n        method: 'post',\n        data: {\n          ...param,\n          pk_val: valueMap.refpk.split(',')\n        },\n        jsonp: jsonp,\n        headers\n\n      }))\n    };\n\n    Promise.all(requestList).then(([columnsData, bodyData, matchData]) => {\n      if (this.onAfterAjax) {\n        this.onAfterAjax(bodyData)\n      }\n      if (matchData) {\n        let { data = [] } = matchData;\n        this.checkedMap = {};\n        this.checkedArray = data.map(item => {\n          item.key = item[valueField];\n          item._checked = true;\n          this.checkedMap[item.key] = item;\n          return item;\n        });\n        if (Object.prototype.toString.call(onMatchInitValue) === '[object Function]') {\n          onMatchInitValue(data);\n        }\n        this.setState({\n          selectedDataLength: this.checkedArray.length,\n          mustRender: Math.random()\n        })\n      }\n      this.launchTableHeader(columnsData);\n      this.launchTableData(bodyData);\n      this.setState({\n        showLoading: false\n      });\n    }).catch((e) => {\n      this.launchTableHeader({});\n      this.launchTableData({});\n      this.setState({\n        showLoading: false\n      });\n      console.error(e)\n    });;\n  }\n\n  getTableHeader = () => {\n    let { refModelUrl, param, jsonp, headers } = props;\n    return request(refModelUrl.refInfo, {\n      method: 'get',\n      params: param,\n      jsonp: jsonp,\n      headers\n    });\n  }\n\n  getTableData = (params) => {\n    let { refModelUrl, param, jsonp, headers } = props;\n    return request(refModelUrl.tableBodyUrl, {\n      method: 'get',\n      params: {\n        ...param,\n        ...params\n      },\n      jsonp: jsonp,\n      headers\n    });\n  }\n\n\t/**\n\t * 根据 refinfo 返回结果拆解并渲染表格表头\n\t * @param {object} data \n\t */\n  launchTableHeader = (data) => {\n    if (!data) return;\n    let { multiple } = props;\n    let keyList = data.strFieldCode || [];\n    let titleList = data.strFieldName || [];\n\n    this.fliterFormInputs = [];\n    let colunmsList = keyList.map((item, index) => {\n      this.fliterFormInputs.push(\n        <SearchPanelItem key={item} name={item} text={titleList[index]}>\n          <FormControl />\n        </SearchPanelItem>\n      )\n      return {\n        key: item,\n        dataIndex: item,\n        title: titleList[index]\n      }\n    });\n    if (colunmsList.length === 0) {\n      colunmsList = [{ title: \"未传递表头数据\", dataIndex: \"nodata\", key: \"nodata\" }];\n\n    } else if (!multiple) {\n      //单选时用对号符号标记当前行选中\n      colunmsList.unshift({\n        title: \" \",\n        dataIndex: \"a\",\n        key: \"a\",\n        width: 45,\n        render(text, record, index) {\n          return <div className={`ref-multiple-table-radio ${record._checked ? 'ref-multiple-table-radio-on' : ''}`} />\n        }\n      })\n\n    }\n    this.columnsData = colunmsList;\n  }\n\t/**\n\t * 处理并渲染表格数据\n\t */\n  launchTableData = (response) => {\n    if (!response) return;\n    let { valueField = \"refpk\" } = props;\n    let { data = [], page = {} } = response;\n    data.map((record, k) => {\n      record.key = record[valueField];\n      return record;\n    });\n    this.tableData = data;\n    this.pageCount = page.pageCount || 0;\n    this.currPageIndex = page.currPageIndex + 1 || 0;\n    this.totalElements = page.totalElements || 0;\n  }\n  //加载getTableData\n  loadTableData = (param) => {\n\t\tthis.setState({\n\t\t\tshowLoading: true\n\t\t});\n\t\tconst _this = this;\n\n\t\tthis.getTableData(param).then(response => {\n\t\t\t_this.launchTableData(response)\n\t\t\t_this.setState({\n\t\t\t\tshowLoading: false\n\t\t\t});\n\t\t}).catch(()=>{\n\t\t\t_this.launchTableData({})\n\t\t\t_this.setState({\n\t\t\t\tshowLoading: false\n\t\t\t});\n\t\t});\n  } \n\n  // 复杂查询\n  searchFilterInfo = (filterInfo) => {\n    const _this = this;\n    let { refModelUrl: { tableBodyUrl }, param, jsonp, headers } = props;\n    this.filterInfo = filterInfo;\n    this.setState({\n      showLoading: true,\n      // tableIsSelecting: true\n    }, function () {\n      let { pageSize } = _this;\n      let paramWithFilter = Object.assign({}, param, { page: 0, pageSize: pageSize, content: '', 'refClientPageInfo.currPageIndex': 0, 'refClientPageInfo.pageSize': pageSize })\n      if (Object.keys(filterInfo).length > 0) {\n        paramWithFilter.content = JSON.stringify(filterInfo)\n      }\n\n      _this.loadTableData(paramWithFilter);\n    })\n  }\n  /** start:分页 */\n  \t/**\n\t * 跳转到制定页数的操作\n\t * @param {number} index 跳转页数\n\t */\n\thandlePagination = (index) => {\n\t\tlet { filterInfo } = this;\n\t\tObject.keys(filterInfo).forEach(key => {\n\t\t\tif(!filterInfo[key]){\n\t\t\t\tdelete filterInfo[key];\n\t\t\t}\n\t\t});\n\n\t\tlet param  = {\n\t\t\t'refClientPageInfo.currPageIndex': index - 1, \n\t\t\t'refClientPageInfo.pageSize': this.pageSize\n\t\t}\n\t\tif(Object.keys(filterInfo) > 0){\n\t\t\tparam.content = JSON.stringify(filterInfo);\n\t\t}\n\t\tthis.loadTableData(param);\n\t}\n\t/**\n\t * 选择每页数据个数\n\t */\n\tdataNumSelect = (index, pageSize) => {\n\t\tlet { filterInfo } = this;\n\t\tObject.keys(filterInfo).forEach(key => {\n\t\t\tif(!filterInfo[key]){\n\t\t\t\tdelete filterInfo[key];\n\t\t\t}\n\t\t});\n\n\t\tlet param  = {\n\t\t\t'refClientPageInfo.currPageIndex': this.currPageIndex -1 , \n\t\t\t'refClientPageInfo.pageSize': pageSize\n\t\t}\n\t\tif(Object.keys(filterInfo) > 0){\n\t\t\tparam.content = JSON.stringify(filterInfo);\n\t\t}\n\t\tthis.pageSize = pageSize;\n\t\tthis.loadTableData(param);\n\t}\n  /** end:分页*/\n\n  onSave= (item) =>{\n    console.log('save',item);\n    this.setState({showModal:false})\n  }\n  onCancel= (item) =>{\n    this.setState({showModal:false})\n  }\n  render() {\n    const {getFieldError,getFieldProps} = this.props.form;\n    let { showLoading,showModal } = this.state;\n    let { columnsData, tableData, pageCount, pageSize, currPageIndex, fliterFormInputs, filterInfo, checkedArray, checkedMap } = this;\n    let {dataNumSelect,handlePagination,searchFilterInfo} = this;\n    let childrenProps = Object.assign(Object.assign({}, this.props), {\n      showModal:showModal,\n      showLoading : showLoading,\n      columnsData : columnsData,\n      tableData : tableData,\n      pageCount : pageCount,\n      pageSize : pageSize,\n      currPageIndex : currPageIndex,\n      fliterFormInputs : fliterFormInputs,\n      filterInfo : filterInfo,\n      dataNumSelect : dataNumSelect,\n      handlePagination : handlePagination,\n      searchFilterInfo : searchFilterInfo,\n      onSave:this.onSave,\n      onCancel:this.onCancel,\n\t\t});\n    return (\n      <div className=\"demoPadding\">\n        <RefMultipleTableBaseUI\n          placeholder=\"placehholder\"\n          title={'复杂表格参照'}\n          backdrop={true}\n          disabled={false}\n          multiple={false}\n          strictMode={true}\n          miniSearch={false}\n          emptyBut={true}\n          {...childrenProps}\n          {\n          ...getFieldProps('valueField', {\n            initialValue: '{\"refname\":\"000\",\"refpk\":\"c4a06b52-4789-4c1e-86b2-83cca5212007\"}',\n            rules: [{\n              message: '请输入姓名',\n              pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}|{\"refpk\":\"\",\"refname\":\"\"}]/\n            }]\n          })\n          }\n\n        />\n        <span className='error'>\n          {getFieldError('valueField')}\n        </span>\n        <Button\n          colors=\"primary\"\n          onClick={() => {\n            this.setState({showModal:true})\n          }}>打开参照</Button>\n        <Button\n          colors=\"primary\"\n          onClick={() => {\n            this.props.form.validateFields((err, values) => {\n              console.log(err, values)\n            });\n          }}>submit</Button>\n      </div>\n    )\n  }\n}\n\n\n\n","desc":" 表格参照"},{"example":<Demo2 />,"title":" 表格参照带有input","code":"/**\n *\n * @title 表格参照带有input\n * @description 表格参照带有input\n *\n */\nimport React, { Component } from 'react';\nimport RefMultipleTableBaseUI,{ SearchPanelItem } from '../../src/index';\nimport RefWithInput from 'ref-core/lib/refs/refcorewithinput';\nimport 'ref-core/lib/refs/refcorewithinput.css';\nimport {FormControl,Button,Form} from 'tinper-bee';\nimport Table from './CommonLogic';\nimport { refValParse } from './utils';\nimport request from './request';\nclass RefMultipleTableWithInput extends Component {\n    onSave = (item) => {\n        console.log('save', item)\n    }\n    onCancel = () => {\n\n    }\n    render() {\n        const { getFieldError, getFieldProps } = this.props.form;\n        const props = {\n            placeholder: \"placehholder\",\n            title: '复杂表格参照',\n            backdrop: true,\n            disabled: false,\n            multiple: true,\n            strictMode: true,\n            miniSearch: false,\n            param: {\n                \"refCode\": \"new_bd_staff\"\n            },\n            refModelUrl: {\n                tableBodyUrl: '/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n                refInfo: '/pap_basedoc/common-ref/refInfo',//表头请求\n            },\n            matchUrl: '/pap_basedoc/common-ref/matchPKRefJSON',\n            filterUrl: '/pap_basedoc/common-ref/filterRefJSON',\n            valueField: \"refpk\",\n            displayField: \"{refname}\",\n        }\n        return (\n          <div>\n              <RefWithInput \n                {...props} \n                onSave={this.onSave} \n                onCancel={this.onCancel}\n                {...getFieldProps('valueField', {\n                    // initialValue:'{\\\"refname\\\":\\\"高级-T3\\\",\\\"refpk\\\":\\\"level5\\\"}',\n                    rules:[{\n                        message: '请输入姓名',\n                        pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}]/\n                    }]\n                })}\n            >\n                <Table />\n            </RefWithInput>\n              <span className='error'>\n                    {getFieldError('valueField')}\n                </span>\n\n                <Button onClick={() => {\n                    this.props.form.validateFields((err, values) => {\n                        console.log(err, values)\n                    });\n                }}>submit</Button>\n          </div>\n            \n        )\n    }\n}\n","desc":" 表格参照带有input"},{"example":<Demo3 />,"title":" 表格参照带有input","code":"/**\n *\n * @title 表格参照带有input\n * @description 表格参照带有input，简单搜索和单选\n *\n */\nimport React, { Component } from 'react';\nimport { FormControl, Form } from 'tinper-bee';\nimport RefWithInput from 'ref-core/lib/refs/refcorewithinput';\nimport RefTable from './CommonLogic';\nimport 'ref-core/lib/refs/refcorewithinput.css';\n\nclass TableRender extends Component {\n    onSave = (item) => {\n        console.log('save', item)\n    }\n    onCancel = () => {\n\n    }\n\n    render() {\n        const { getFieldError, getFieldProps } = this.props.form;\n        console.log(this.props);\n        // const { cBillName, view } = this.props.viewApplication\n        const props = {\n            placeholder: \"placehholder\",\n            title: '简单表格',\n            backdrop: true,\n            disabled: false,\n            multiple: true,\n            strictMode: true,\n            miniSearch: false,\n            param: {\n                \"refCode\": \"new_bd_staff\"\n            },\n            refModelUrl: {\n                tableBodyUrl: '/pap_basedoc/common-ref/blobRefTreeGrid',//表体请求\n                refInfo: '/pap_basedoc/common-ref/refInfo',//表头请求\n            },\n            matchUrl: '/pap_basedoc/common-ref/matchPKRefJSON',\n            filterUrl: '/pap_basedoc/common-ref/filterRefJSON',\n            valueField: \"refpk\",\n            displayField: \"{refname}\",\n        }\n\n        return (\n            <div>\n                <RefWithInput\n                    {...props}\n                    onSave={this.onSave}\n                    onCancel={this.onCancel}\n                    {...getFieldProps('valueField', {\n                        // initialValue:'{\\\"refname\\\":\\\"高级-T3\\\",\\\"refpk\\\":\\\"level5\\\"}',\n                        rules: [{\n                            message: '请输入姓名',\n                            pattern: /[^{\"refname\":\"\",\"refpk\":\"\"}]/\n                        }]\n                    })}\n                >\n                    <RefTable />\n                </RefWithInput>\n            </div>\n        );\n    }\n}\n\n\n","desc":" 表格参照带有input，简单搜索和单选"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick() {
        this.setState({ open: !this.state.open })
    }

    render () {
        const { title, example, code, desc  } = this.props;
        let caret = this.state.open ? CARETUP : CARET;
        let text = this.state.open ? "隐藏代码" : "查看代码";

        const footer = (
            <Button shape="block" onClick={ this.handleClick }>
                { caret }
                { text }
            </Button>
        );
        return (
            <Col md={12} >
                <h3>{ title }</h3>
                <p>{ desc }</p>
                <Panel collapsible expanded={ this.state.open } colors='bordered' header={ example } footer={footer} footerStyle = {{padding: 0}}>
                    <pre><code className="hljs javascript">{ process.env.NODE_ENV==='development'?code:code.replace('../../src/index.js',pkg.name).replace('../../src/index',pkg.name) }</code></pre>
                </Panel>
            </Col>
        )
    }
}

export default class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
                <Row>
                    {DemoArray.map((child,index) => {

                        return (
                            <Demo example= {child.example} title= {child.title} code= {child.code} desc= {child.desc} key= {index}/>
                        )

                    })}
                </Row>
        )
    }
}

